import{_ as s,a as i,o as a,aj as n}from"./chunks/framework.Ba_Ek9Jm.js";const h="/assets/122593541256083.N3V1lFyw.png",t="/assets/122616765968916.DjdyOPNy.png",l="/assets/122654046738666.EBnCic5s.png",p="/assets/122732767811250.C1kgmE9i.png",k="/assets/123372440928458.DILodvg9.png",B=JSON.parse('{"title":"《AI Agents in LangGraph》002：LangGraph 组件","description":"","frontmatter":{"title":"《AI Agents in LangGraph》002：LangGraph 组件","date":"2024-06-11 12:00:00","tags":["LearnDL","LangGraph","Agent"],"category":["AI"]},"headers":[],"relativePath":"topics/learn-deepleaning/ai-agents-in-langgraph/2024-06-11-x2-langchain-components.md","filePath":"topics/learn-deepleaning/ai-agents-in-langgraph/2024-06-11-x2-langchain-components.md","lastUpdated":1718193786000}'),e={name:"topics/learn-deepleaning/ai-agents-in-langgraph/2024-06-11-x2-langchain-components.md"},r=n('<p>!!! abstract 今天分享 <strong>DeepLearning.AI</strong> 的课程：《使用LangGraph构架AI代理》。 !!!</p><h2 id="langgraph-简介" tabindex="-1">LangGraph 简介 <a class="header-anchor" href="#langgraph-简介" aria-label="Permalink to &quot;LangGraph 简介&quot;">​</a></h2><p>今天介绍 LangGraph 的组件。</p><p>LangGraph 是一个 LangChain 支持<strong>图</strong>的扩展：</p><ul><li>同时支持使用图来描述单代理和多代理流程</li><li>允许外部控制代理的「流」</li><li>内置持久化</li></ul><h2 id="图简介" tabindex="-1">图简介 <a class="header-anchor" href="#图简介" aria-label="Permalink to &quot;图简介&quot;">​</a></h2><p>在啰嗦一下图的概念（流程图）：</p><h3 id="节点" tabindex="-1">节点 <a class="header-anchor" href="#节点" aria-label="Permalink to &quot;节点&quot;">​</a></h3><p><img src="'+h+'" alt=""></p><p>节点就是代理要执行的函数。</p><h3 id="边" tabindex="-1">边 <a class="header-anchor" href="#边" aria-label="Permalink to &quot;边&quot;">​</a></h3><p><img src="'+t+'" alt=""></p><p>边用来连接节点，表示执行完前面的节点执行后面的节点。</p><h3 id="判断" tabindex="-1">判断 <a class="header-anchor" href="#判断" aria-label="Permalink to &quot;判断&quot;">​</a></h3><p><img src="'+l+'" alt=""></p><p>条件判断允许代理根据不同的逻辑执行不同的节点或流程。</p><h3 id="循环" tabindex="-1">循环 <a class="header-anchor" href="#循环" aria-label="Permalink to &quot;循环&quot;">​</a></h3><p><img src="'+p+`" alt=""></p><p>当节点又指向之前的节点，就形成了一个循环。</p><h2 id="state-状态" tabindex="-1">State 状态 <a class="header-anchor" href="#state-状态" aria-label="Permalink to &quot;State 状态&quot;">​</a></h2><p>LangGraph 中的状态用来存储代理执行过程中产生的数据。</p><p>一个简单的 State 如下所示，仅仅存储系统的对话。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> AgentState</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">TypedDict</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    messages: Annotated[list[AnyMessage], operator.add]</span></span></code></pre></div><h2 id="langgraph-代理类" tabindex="-1">LangGraph 代理类 <a class="header-anchor" href="#langgraph-代理类" aria-label="Permalink to &quot;LangGraph 代理类&quot;">​</a></h2><p>现在我们用LangGraph 来编写代理。</p><p>可以用 <code>graph = StateGraph(AgentState)</code> 来创建 Graph 对象，使用 Graph 的如下方法来构建<strong>图</strong>：</p><ul><li>add_node</li><li>add_conditional_edges</li><li>add_edge</li><li>set_entry_point</li></ul><p>先创建一个动作函数：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">tool </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TavilySearchResults(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">max_results</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#increased number of results</span></span></code></pre></div><p>!!! note Tavily 搜索 Tavily 免费用户每个月有 1000 次的免费配额哦。 !!!</p><p>构建 Agent 代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Agent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self, model, tools, system</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.system </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> system</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        graph </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> StateGraph(AgentState)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        graph.add_node(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;llm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.call_openai)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        graph.add_node(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.take_action)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        graph.add_conditional_edges(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &quot;llm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.exists_action,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            {</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">END</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        graph.add_edge(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;llm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        graph.set_entry_point(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;llm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.graph </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> graph.compile()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.tools </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {t.name: t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> tools}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> model.bind_tools(tools)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> exists_action</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self, state: AgentState):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> state[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;messages&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">][</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(result.tool_calls) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> call_openai</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self, state: AgentState):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> state[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;messages&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.system:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [SystemMessage(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.system)] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> messages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.model.invoke(messages)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;messages&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [message]}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> take_action</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self, state: AgentState):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        tool_calls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> state[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;messages&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">][</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">].tool_calls</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        results </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> tool_calls:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Calling: </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">t</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> t[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.tools:      </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># check for bad tool name from LLM</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">                print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> ...</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.bad tool name</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">                result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;bad tool name, retry&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  # instruct LLM to retry if bad</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">                result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.tools[t[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]].invoke(t[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;args&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            results.append(ToolMessage(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">tool_call_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">t[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">t[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(result)))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Back to the model!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;messages&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: results}</span></span></code></pre></div><p>上面代码添加了 LLM 节点来执行函数。</p><h2 id="创建代理" tabindex="-1">创建代理 <a class="header-anchor" href="#创建代理" aria-label="Permalink to &quot;创建代理&quot;">​</a></h2><p>现在可以使用上面的代理类快速创建代理机器人：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;&quot;&quot;你是一个聪明的研究助理。使用搜索引擎查找信息。</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">你可以拨打多个电话（一起或按顺序拨打）。</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">只有当你确定你想要什么时才查找信息。</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">如果你需要在提出后续问题之前查找一些信息，你可以这样做！</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ChatOpenAI(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;gpt-3.5-turbo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">abot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Agent(model, [tool], </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">system</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">prompt)</span></span></code></pre></div><h2 id="查看图" tabindex="-1">查看图 <a class="header-anchor" href="#查看图" aria-label="Permalink to &quot;查看图&quot;">​</a></h2><p>可以使用 Python 的工具类快速查看我们刚才构建的代理流程图是什么样。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> IPython.display </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Image</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Image(abot.graph.get_graph().draw_png())</span></span></code></pre></div><p>是不是很简单，除去开始和结束节点，就是大模型和动作节点。</p><p><img src="`+k+`" alt=""></p><h2 id="执行代理" tabindex="-1">执行代理 <a class="header-anchor" href="#执行代理" aria-label="Permalink to &quot;执行代理&quot;">​</a></h2><p>具体的执行过程我就不分析了，我们执行代理并直接查看结果。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [HumanMessage(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;What is the weather in sf?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> abot.graph.invoke({</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;messages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: messages})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">result[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;messages&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">][</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">].content</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">旧金山的当前天气如下：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 温度：</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">12.2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">°C (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">54.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">°F)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 状况：晴朗</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 风速：</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5.6</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 英里</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">小时，风向：西北偏北</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 气压：</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1013.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> mb</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 湿度：</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">97</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">%</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 能见度：</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">16.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 公里</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 紫外线指数：</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">如果您需要更多详细信息或历史天气数据，请告诉我！</span></span></code></pre></div><p>我们一下询问两个城市的天气试试：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [HumanMessage(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;旧金山和洛杉矶的天气怎么样？&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> abot.graph.invoke({</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;messages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: messages})</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>“旧金山当前天气为 54.0°F，晴空。风速为 5.6 英里/小时，湿度为 97%。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>洛杉矶当前气温为 59.5°F，多云。风速为 4.3 英里/小时，湿度为 90%。”</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>接上昨天手写 Agent，今天学会了用 <code>StateGraph</code> 来记录节点状态，并构建图，使用 <code>TavilySearch</code> 来进行搜索。</p><p>使用框架和工具的好处就是，减少代码量、让代码开起来更加简洁可读。</p><hr><div style="text-align:center;color:#00000099;font-size:14px;">END</div>`,53),d=[r];function g(A,y,o,C,F,D){return a(),i("div",null,d)}const E=s(e,[["render",g]]);export{B as __pageData,E as default};
